using DAL.EF.Tables;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BLL.Utils
{
    public class AdminLogPDFGenerator
    {
        public static byte[] Generate(List<AdminActivity> logs, string generatedBy)
        {
            QuestPDF.Settings.License = LicenseType.Community;

            var timestamp = DateTime.Now.ToString("f");

            var doc = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(40);
                    page.Header().Column(col =>
                    {
                        col.Item().Text("Admin Activity Log Report").FontSize(20).Bold();
                        col.Item().Text($"Generated by: {generatedBy}").FontSize(10);
                        col.Item().Text($"Generated at: {timestamp}").FontSize(10);
                    });

                    page.Content().Table(table =>
                    {
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn();
                            columns.RelativeColumn();
                            columns.RelativeColumn();
                        });

                        table.Header(header =>
                        {
                            header.Cell().Element(CellStyle).Text("Admin Id").Bold();
                            header.Cell().Element(CellStyle).Text("Action").Bold();
                            header.Cell().Element(CellStyle).Text("Timestamp").Bold();
                        });

                        
                        foreach (var log in logs)
                        {
                            table.Cell().Element(CellStyle).Text(log.AdminId.ToString());
                            table.Cell().Element(CellStyle).Text(log.Action.ToString());
                            table.Cell().Element(CellStyle).Text(log.Timestamp.ToString("g"));
                        }

                         IContainer CellStyle(IContainer containerr) =>
                            containerr.Border(1).Padding(5).AlignCenter().ShowOnce();
                    });
                });
            });

            using (var ms = new MemoryStream())
            {
                doc.GeneratePdf(ms);
                return ms.ToArray();
            }
        }
    }
}
